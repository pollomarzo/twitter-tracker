{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState } from 'react';\nimport { CircularProgress, Fade, Button, makeStyles } from '@material-ui/core';\nimport { AlertWindow, InputField } from '.';\nconst COORDINATE_RE = RegExp('^-?[1]?[0-8]?[0-9][.][0-9]{2}$');\nconst useStyles = makeStyles(() => ({\n  form: {\n    height: '100%',\n    display: 'flex',\n    flexDirection: 'column'\n  },\n  submitContainer: {\n    display: 'flex',\n    alignItems: 'center'\n  },\n  submitButton: {\n    margin: 10,\n    width: 100,\n    fontWeight: 800,\n    color: 'white',\n    backgroundColor: '#1DA1F2',\n    '&:hover': {\n      backgroundColor: 'lightblue',\n      color: '#1DA1F2'\n    }\n  }\n}));\n\nconst CoordsForm = ({\n  onStart,\n  onStop,\n  open\n}) => {\n  const {\n    form,\n    submitContainer,\n    submitButton\n  } = useStyles(); // A set of coords to initialize a geolocalized stream\n\n  const {\n    0: coords,\n    1: setCoordinates\n  } = useState({\n    latitudeStart: 0,\n    latitudeEnd: 0,\n    longitudeStart: 0,\n    longitudeEnd: 0\n  });\n  const {\n    0: error,\n    1: setError\n  } = useState(false);\n\n  const handleChange = e => setCoordinates(_objectSpread(_objectSpread({}, coords), {}, {\n    [e.target.name]: e.target.value\n  }));\n\n  const handleSubmit = () => {\n    const values = Object.values(coords);\n\n    if (values.every(value => value && COORDINATE_RE.test(value))) {\n      onStart({\n        coords\n      });\n    } else {\n      setError(true);\n    }\n  };\n\n  return /*#__PURE__*/_jsxs(\"div\", {\n    className: form,\n    children: [/*#__PURE__*/_jsx(InputField, {\n      label: \"Longitude start\",\n      fieldName: \"longitudeStart\",\n      handler: handleChange\n    }), /*#__PURE__*/_jsx(InputField, {\n      label: \"Latitude start\",\n      fieldName: \"latitudeStart\",\n      handler: handleChange\n    }), /*#__PURE__*/_jsx(InputField, {\n      label: \"Longitude end\",\n      fieldName: \"longitudeEnd\",\n      handler: handleChange\n    }), /*#__PURE__*/_jsx(InputField, {\n      label: \"Latitude end\",\n      fieldName: \"latitudeEnd\",\n      handler: handleChange\n    }), /*#__PURE__*/_jsxs(\"div\", {\n      className: submitContainer,\n      children: [open ? /*#__PURE__*/_jsx(Button, {\n        onClick: onStop,\n        variant: \"contained\",\n        className: submitButton,\n        color: \"default\",\n        children: \"STOP\"\n      }) : /*#__PURE__*/_jsx(Button, {\n        onClick: handleSubmit,\n        variant: \"contained\",\n        className: submitButton,\n        color: \"default\",\n        children: \"START\"\n      }), /*#__PURE__*/_jsx(\"div\", {\n        children: /*#__PURE__*/_jsx(Fade, {\n          in: open,\n          unmountOnExit: true,\n          children: /*#__PURE__*/_jsx(CircularProgress, {})\n        })\n      })]\n    }), /*#__PURE__*/_jsx(AlertWindow, {\n      isOpen: error,\n      onConfirm: setError,\n      title: \"Error\",\n      msg: \"An acceptable input is a number in range [-180.00, 180.00] written with this formula\"\n    })]\n  });\n};\n\nexport default CoordsForm;","map":null,"metadata":{},"sourceType":"module"}