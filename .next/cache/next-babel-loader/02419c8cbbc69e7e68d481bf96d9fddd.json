{"ast":null,"code":"const {\n  v4: uuidv4\n} = require('uuid');\n\nconst Twitter = require('twitter-lite');\n\nconst credentials = require('./.credentials');\n\nlet streams = {};\n\nfunction exportJSON(data) {\n  json = {\n    data: []\n  };\n  data.forEach(value => {\n    json.data.push(value);\n  });\n  var json = JSON.stringify(json.data);\n  return json;\n}\n\nconsole.log('hello');\nconst client = new Twitter({\n  subdomain: 'api',\n  version: '1.1',\n  consumer_key: credentials.consumer_key,\n  // from Twitter.\n  consumer_secret: credentials.consumer_secret,\n  // from Twitter.\n  access_token_key: credentials.access_token_key,\n  // from your User (oauth_token)\n  access_token_secret: credentials.access_token_secret // from your User (oauth_token_secret);\n\n});\n\nconst startStream = (type, parameters) => {\n  const streamId = uuidv4();\n  console.log(streamId);\n  const stream = client.stream('statuses/filter', parameters);\n  streams[streamId] = {\n    stream,\n    data: [],\n    error: null\n  };\n  console.log(`startStream: ${register.magic}`);\n  stream.on('start', () => console.log('stream started'));\n  stream.on('error', error => {\n    console.log(`ERROR! Twitter says: ${error.message}`);\n    streams[streamId].error = error;\n  }); //todo handler error\n\n  stream.on('data', tweet => {\n    switch (type) {\n      case 'hashtag':\n        if (tweet.user.location || tweet.geo || tweet.coordinates || tweet.place) {\n          streams[streamId].data.push(tweet);\n          streams[streamId].socket.emit('data', tweet);\n          console.log(tweet.text);\n        }\n\n        break;\n\n      default:\n        streams[streamId].data.push(tweet);\n        console.log(tweet.text);\n    }\n  });\n  return streamId;\n};\n\nconst closeStream = streamId => {\n  const {\n    stream,\n    data,\n    error\n  } = streams[streamId];\n  console.log('closeStream data:', data);\n  stream.destroy();\n  delete streams[streamId];\n  const dataJson = exportJSON(data);\n  return {\n    dataJson,\n    error\n  };\n};\n\nconst register = (socket, streamId) => {\n  console.log(`Register: ${register.magic}`);\n  streams[streamId].socket = socket;\n};\n\nregister.startStream = startStream;\nregister.closeStream = closeStream;\nregister.magic = Math.random();\nmodule.exports = register;","map":null,"metadata":{},"sourceType":"script"}