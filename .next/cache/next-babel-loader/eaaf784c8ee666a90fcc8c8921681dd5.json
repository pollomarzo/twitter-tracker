{"ast":null,"code":"const {\n  v4: uuidv4\n} = require(\"uuid\");\n\nconst Twitter = require(\"twitter-lite\");\n\nconst credentials = require(\"./.credentials\");\n\nlet streams = {};\n\nfunction exportJSON(data) {\n  json = {\n    data: []\n  };\n  data.forEach((value, index) => {\n    json.data.push(value);\n  });\n  var json = JSON.stringify(json.data);\n  return json;\n}\n\nconst client = new Twitter({\n  subdomain: \"api\",\n  version: \"1.1\",\n  consumer_key: credentials.consumer_key,\n  // from Twitter.\n  consumer_secret: credentials.consumer_secret,\n  // from Twitter.\n  access_token_key: credentials.access_token_key,\n  // from your User (oauth_token)\n  access_token_secret: credentials.access_token_secret // from your User (oauth_token_secret);\n\n});\n\nexports.startStream = locations => {\n  const streamId = uuidv4();\n  const stream = client.stream(\"statuses/filter\", {\n    locations\n  });\n  stream.on(\"start\", () => {\n    streams[streamId] = {\n      stream,\n      data: [],\n      error: null\n    };\n    console.log(\"stream started\");\n  });\n  stream.on(\"error\", error => streams[streamId].error = error); //todo handler error\n\n  stream.on(\"data\", tweet => {\n    streams[streamId].data.push(tweet);\n    console.log(tweet.text);\n  });\n  stream.on(\"end\", () => delete streams[streamId]);\n  return streamId;\n};\n\nexports.closeStream = streamId => {\n  const {\n    stream,\n    data,\n    error\n  } = streams[streamId];\n  stream.emit(\"end\");\n  const dataJson = exportJSON(data);\n  return {\n    dataJson,\n    error\n  };\n};","map":{"version":3,"sources":["/home/notchla/Documents/IngSw/twitter-tracker/twitterAPI/geoStream.js"],"names":["v4","uuidv4","require","Twitter","credentials","streams","exportJSON","data","json","forEach","value","index","push","JSON","stringify","client","subdomain","version","consumer_key","consumer_secret","access_token_key","access_token_secret","exports","startStream","locations","streamId","stream","on","error","console","log","tweet","text","closeStream","emit","dataJson"],"mappings":"AAAA,MAAM;AAAEA,EAAAA,EAAE,EAAEC;AAAN,IAAiBC,OAAO,CAAC,MAAD,CAA9B;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,cAAD,CAAvB;;AACA,MAAME,WAAW,GAAGF,OAAO,CAAC,gBAAD,CAA3B;;AAEA,IAAIG,OAAO,GAAG,EAAd;;AAEA,SAASC,UAAT,CAAoBC,IAApB,EAA0B;AACxBC,EAAAA,IAAI,GAAG;AAAED,IAAAA,IAAI,EAAE;AAAR,GAAP;AACAA,EAAAA,IAAI,CAACE,OAAL,CAAa,CAACC,KAAD,EAAQC,KAAR,KAAkB;AAC7BH,IAAAA,IAAI,CAACD,IAAL,CAAUK,IAAV,CAAeF,KAAf;AACD,GAFD;AAGA,MAAIF,IAAI,GAAGK,IAAI,CAACC,SAAL,CAAeN,IAAI,CAACD,IAApB,CAAX;AACA,SAAOC,IAAP;AACD;;AAED,MAAMO,MAAM,GAAG,IAAIZ,OAAJ,CAAY;AACzBa,EAAAA,SAAS,EAAE,KADc;AAEzBC,EAAAA,OAAO,EAAE,KAFgB;AAGzBC,EAAAA,YAAY,EAAEd,WAAW,CAACc,YAHD;AAGe;AACxCC,EAAAA,eAAe,EAAEf,WAAW,CAACe,eAJJ;AAIqB;AAC9CC,EAAAA,gBAAgB,EAAEhB,WAAW,CAACgB,gBALL;AAKuB;AAChDC,EAAAA,mBAAmB,EAAEjB,WAAW,CAACiB,mBANR,CAM6B;;AAN7B,CAAZ,CAAf;;AASAC,OAAO,CAACC,WAAR,GAAuBC,SAAD,IAAe;AACnC,QAAMC,QAAQ,GAAGxB,MAAM,EAAvB;AACA,QAAMyB,MAAM,GAAGX,MAAM,CAACW,MAAP,CAAc,iBAAd,EAAiC;AAAEF,IAAAA;AAAF,GAAjC,CAAf;AACAE,EAAAA,MAAM,CAACC,EAAP,CAAU,OAAV,EAAmB,MAAM;AACvBtB,IAAAA,OAAO,CAACoB,QAAD,CAAP,GAAoB;AAAEC,MAAAA,MAAF;AAAUnB,MAAAA,IAAI,EAAE,EAAhB;AAAoBqB,MAAAA,KAAK,EAAE;AAA3B,KAApB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACD,GAHD;AAIAJ,EAAAA,MAAM,CAACC,EAAP,CAAU,OAAV,EAAoBC,KAAD,IAAYvB,OAAO,CAACoB,QAAD,CAAP,CAAkBG,KAAlB,GAA0BA,KAAzD,EAPmC,CAO+B;;AAClEF,EAAAA,MAAM,CAACC,EAAP,CAAU,MAAV,EAAmBI,KAAD,IAAW;AAC3B1B,IAAAA,OAAO,CAACoB,QAAD,CAAP,CAAkBlB,IAAlB,CAAuBK,IAAvB,CAA4BmB,KAA5B;AACAF,IAAAA,OAAO,CAACC,GAAR,CAAYC,KAAK,CAACC,IAAlB;AACD,GAHD;AAIAN,EAAAA,MAAM,CAACC,EAAP,CAAU,KAAV,EAAiB,MAAM,OAAOtB,OAAO,CAACoB,QAAD,CAArC;AACA,SAAOA,QAAP;AACD,CAdD;;AAgBAH,OAAO,CAACW,WAAR,GAAuBR,QAAD,IAAc;AAClC,QAAM;AAAEC,IAAAA,MAAF;AAAUnB,IAAAA,IAAV;AAAgBqB,IAAAA;AAAhB,MAA0BvB,OAAO,CAACoB,QAAD,CAAvC;AACAC,EAAAA,MAAM,CAACQ,IAAP,CAAY,KAAZ;AACA,QAAMC,QAAQ,GAAG7B,UAAU,CAACC,IAAD,CAA3B;AACA,SAAO;AAAE4B,IAAAA,QAAF;AAAYP,IAAAA;AAAZ,GAAP;AACD,CALD","sourcesContent":["const { v4: uuidv4 } = require(\"uuid\");\r\nconst Twitter = require(\"twitter-lite\");\r\nconst credentials = require(\"./.credentials\");\r\n\r\nlet streams = {};\r\n\r\nfunction exportJSON(data) {\r\n  json = { data: [] };\r\n  data.forEach((value, index) => {\r\n    json.data.push(value);\r\n  });\r\n  var json = JSON.stringify(json.data);\r\n  return json;\r\n}\r\n\r\nconst client = new Twitter({\r\n  subdomain: \"api\",\r\n  version: \"1.1\",\r\n  consumer_key: credentials.consumer_key, // from Twitter.\r\n  consumer_secret: credentials.consumer_secret, // from Twitter.\r\n  access_token_key: credentials.access_token_key, // from your User (oauth_token)\r\n  access_token_secret: credentials.access_token_secret, // from your User (oauth_token_secret);\r\n});\r\n\r\nexports.startStream = (locations) => {\r\n  const streamId = uuidv4();\r\n  const stream = client.stream(\"statuses/filter\", { locations });\r\n  stream.on(\"start\", () => {\r\n    streams[streamId] = { stream, data: [], error: null };\r\n    console.log(\"stream started\");\r\n  });\r\n  stream.on(\"error\", (error) => (streams[streamId].error = error)); //todo handler error\r\n  stream.on(\"data\", (tweet) => {\r\n    streams[streamId].data.push(tweet);\r\n    console.log(tweet.text);\r\n  });\r\n  stream.on(\"end\", () => delete streams[streamId]);\r\n  return streamId;\r\n};\r\n\r\nexports.closeStream = (streamId) => {\r\n  const { stream, data, error } = streams[streamId];\r\n  stream.emit(\"end\");\r\n  const dataJson = exportJSON(data);\r\n  return { dataJson, error };\r\n};\r\n"]},"metadata":{},"sourceType":"script"}