{"ast":null,"code":"var _require = require('uuid'),\n    uuidv4 = _require.v4;\n\nvar Twitter = require('twitter-lite');\n\nvar credentials = require('./.credentials');\n\nvar streams = {};\n\nfunction exportJSON(data) {\n  json = {\n    data: []\n  };\n  data.forEach(function (value) {\n    json.data.push(value);\n  });\n  var json = JSON.stringify(json.data);\n  return json;\n}\n\nconsole.log('hello');\nvar client = new Twitter({\n  subdomain: 'api',\n  version: '1.1',\n  consumer_key: credentials.consumer_key,\n  // from Twitter.\n  consumer_secret: credentials.consumer_secret,\n  // from Twitter.\n  access_token_key: credentials.access_token_key,\n  // from your User (oauth_token)\n  access_token_secret: credentials.access_token_secret // from your User (oauth_token_secret);\n\n});\n\nvar startStream = function startStream(type, parameters) {\n  var streamId = uuidv4();\n  console.log(streamId);\n  var stream = client.stream('statuses/filter', parameters);\n  streams[streamId] = {\n    stream: stream,\n    data: [],\n    error: null\n  };\n  console.log(\"startStream: \".concat(register.magic));\n  stream.on('start', function () {\n    return console.log('stream started');\n  });\n  stream.on('error', function (error) {\n    console.log(\"ERROR! Twitter says: \".concat(error.message));\n    streams[streamId].error = error;\n  }); //todo handler error\n\n  stream.on('data', function (tweet) {\n    switch (type) {\n      case 'hashtag':\n        if (tweet.user.location || tweet.geo || tweet.coordinates || tweet.place) {\n          streams[streamId].data.push(tweet);\n          streams[streamId].socket.emit('data', tweet);\n          console.log(tweet.text);\n        }\n\n        break;\n\n      default:\n        streams[streamId].data.push(tweet);\n        console.log(tweet.text);\n    }\n  });\n  return streamId;\n};\n\nvar closeStream = function closeStream(streamId) {\n  var _streams$streamId = streams[streamId],\n      stream = _streams$streamId.stream,\n      data = _streams$streamId.data,\n      error = _streams$streamId.error;\n  console.log('closeStream data:', data);\n  stream.destroy();\n  delete streams[streamId];\n  var dataJson = exportJSON(data);\n  return {\n    dataJson: dataJson,\n    error: error\n  };\n};\n\nvar register = function register(socket, streamId) {\n  console.log(\"Register: \".concat(register.magic));\n  streams[streamId].socket = socket;\n};\n\nregister.startStream = startStream;\nregister.closeStream = closeStream;\nregister.magic = Math.random();\nmodule.exports = register;","map":null,"metadata":{},"sourceType":"script"}