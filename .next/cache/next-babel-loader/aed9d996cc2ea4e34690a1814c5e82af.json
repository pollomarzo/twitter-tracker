{"ast":null,"code":"const {\n  v4: uuidv4\n} = require('uuid');\n\nconst Twitter = require('twitter-lite');\n\nconst credentials = require('./.credentials');\n\nlet streams = {};\n\nfunction exportJSON(data) {\n  json = {\n    data: []\n  };\n  data.forEach(value => {\n    json.data.push(value);\n  });\n  var json = JSON.stringify(json.data);\n  return json;\n}\n\nconst client = new Twitter({\n  subdomain: 'api',\n  version: '1.1',\n  consumer_key: credentials.consumer_key,\n  // from Twitter.\n  consumer_secret: credentials.consumer_secret,\n  // from Twitter.\n  access_token_key: credentials.access_token_key,\n  // from your User (oauth_token)\n  access_token_secret: credentials.access_token_secret // from your User (oauth_token_secret);\n\n});\n\nconst startStream = (type, parameters) => {\n  const streamId = uuidv4();\n  console.log(streamId);\n  const stream = client.stream('statuses/filter', parameters);\n  streams[streamId] = {\n    stream,\n    data: [],\n    error: null\n  };\n  stream.on('start', () => console.log('stream started'));\n  stream.on('error', error => {\n    console.log(`ERROR! Twitter says: ${error.message}`);\n    streams[streamId].error = error;\n  }); //todo handler error\n\n  stream.on('data', tweet => {\n    switch (type) {\n      case 'hashtag':\n        if (tweet.user.location || tweet.geo || tweet.coordinates || tweet.place) {\n          streams[streamId].data.push(tweet);\n          streams[streamId].socket.emit('data', tweet);\n          console.log(tweet.text);\n        }\n\n        break;\n\n      default:\n        streams[streamId].data.push(tweet);\n        console.log(tweet.text);\n    }\n  });\n  return streamId;\n};\n\nconst closeStream = streamId => {\n  const {\n    stream,\n    data,\n    error\n  } = streams[streamId];\n  console.log('closeStream data:', data);\n  stream.destroy();\n  delete streams[streamId];\n  const dataJson = exportJSON(data);\n  return {\n    dataJson,\n    error\n  };\n};\n\nconst register = (socket, streamId) => {\n  console.log(streams);\n  streams[streamId].socket = socket;\n};\n\nregister.startStream = startStream;\nregister.closeStream = closeStream;\nmodule.exports = register;","map":{"version":3,"sources":["/home/notchla/Documents/IngSw/twitter-tracker/twitterAPI/geoStream.js"],"names":["v4","uuidv4","require","Twitter","credentials","streams","exportJSON","data","json","forEach","value","push","JSON","stringify","client","subdomain","version","consumer_key","consumer_secret","access_token_key","access_token_secret","startStream","type","parameters","streamId","console","log","stream","error","on","message","tweet","user","location","geo","coordinates","place","socket","emit","text","closeStream","destroy","dataJson","register","module","exports"],"mappings":"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","sourcesContent":["const { v4: uuidv4 } = require('uuid');\r\nconst Twitter = require('twitter-lite');\r\nconst credentials = require('./.credentials');\r\n\r\nlet streams = {};\r\n\r\nfunction exportJSON(data) {\r\n  json = { data: [] };\r\n  data.forEach((value) => {\r\n    json.data.push(value);\r\n  });\r\n  var json = JSON.stringify(json.data);\r\n  return json;\r\n}\r\n\r\nconst client = new Twitter({\r\n  subdomain: 'api',\r\n  version: '1.1',\r\n  consumer_key: credentials.consumer_key, // from Twitter.\r\n  consumer_secret: credentials.consumer_secret, // from Twitter.\r\n  access_token_key: credentials.access_token_key, // from your User (oauth_token)\r\n  access_token_secret: credentials.access_token_secret, // from your User (oauth_token_secret);\r\n});\r\n\r\nconst startStream = (type, parameters) => {\r\n  const streamId = uuidv4();\r\n  console.log(streamId);\r\n  const stream = client.stream('statuses/filter', parameters);\r\n  streams[streamId] = { stream, data: [], error: null };\r\n  stream.on('start', () => console.log('stream started'));\r\n  stream.on('error', (error) => {\r\n    console.log(`ERROR! Twitter says: ${error.message}`);\r\n    streams[streamId].error = error;\r\n  }); //todo handler error\r\n  stream.on('data', (tweet) => {\r\n    switch (type) {\r\n      case 'hashtag':\r\n        if (tweet.user.location || tweet.geo || tweet.coordinates || tweet.place) {\r\n          streams[streamId].data.push(tweet);\r\n          streams[streamId].socket.emit('data', tweet);\r\n          console.log(tweet.text);\r\n        }\r\n        break;\r\n      default:\r\n        streams[streamId].data.push(tweet);\r\n        console.log(tweet.text);\r\n    }\r\n  });\r\n  return streamId;\r\n};\r\n\r\nconst closeStream = (streamId) => {\r\n  const { stream, data, error } = streams[streamId];\r\n  console.log('closeStream data:', data);\r\n  stream.destroy();\r\n  delete streams[streamId];\r\n  const dataJson = exportJSON(data);\r\n  return { dataJson, error };\r\n};\r\n\r\nconst register = (socket, streamId) => {\r\n  console.log(streams);\r\n  streams[streamId].socket = socket;\r\n};\r\n\r\nregister.startStream = startStream;\r\nregister.closeStream = closeStream;\r\n\r\nmodule.exports = register;\r\n"]},"metadata":{},"sourceType":"script"}