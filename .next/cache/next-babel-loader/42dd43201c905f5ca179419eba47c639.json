{"ast":null,"code":"const {\n  v4: uuidv4\n} = require(\"uuid\");\n\nconst Twitter = require(\"twitter-lite\");\n\nconst credentials = require(\"./.credentials\");\n\nlet streams = {};\n\nfunction exportJSON(data) {\n  json = {\n    data: []\n  };\n  data.forEach((value, index) => {\n    json.data.push(value);\n  });\n  var json = JSON.stringify(json.data);\n  return json;\n}\n\nconst client = new Twitter({\n  subdomain: \"api\",\n  version: \"1.1\",\n  consumer_key: credentials.consumer_key,\n  // from Twitter.\n  consumer_secret: credentials.consumer_secret,\n  // from Twitter.\n  access_token_key: credentials.access_token_key,\n  // from your User (oauth_token)\n  access_token_secret: credentials.access_token_secret // from your User (oauth_token_secret);\n\n});\n\nexports.startStream = (type, parameters) => {\n  const streamId = uuidv4();\n  const stream = client.stream(\"statuses/filter\", parameters);\n  stream.on(\"start\", () => {\n    streams[streamId] = {\n      stream,\n      data: [],\n      error: null\n    };\n    console.log(\"stream started\");\n  });\n  stream.on(\"error\", error => streams[streamId].error = error); //todo handler error\n\n  stream.on(\"data\", tweet => {\n    switch (type) {\n      case \"hashtag\":\n        if (tweet.user.location || tweet.geo || tweet.coordinates || tweet.place) {\n          streams[streamId].data.push(tweet);\n          console.log(tweet.text);\n        }\n\n        break;\n\n      default:\n        streams[streamId].data.push(tweet);\n        console.log(tweet.text);\n    }\n  });\n  stream.on(\"end\", () => delete streams[streamId]);\n  return streamId;\n};\n\nexports.closeStream = streamId => {\n  const {\n    stream,\n    data,\n    error\n  } = streams[streamId];\n  console.log(\"closeStream data:\", data);\n  stream.emit(\"end\");\n  stream.removeAllListeners();\n  const dataJson = exportJSON(data);\n  return {\n    dataJson,\n    error\n  };\n};\n\nmodule.exports = () => {\n  console.log(\"hello\");\n};","map":{"version":3,"sources":["/home/notchla/Documents/IngSw/twitter-tracker/twitterAPI/geoStream.js"],"names":["v4","uuidv4","require","Twitter","credentials","streams","exportJSON","data","json","forEach","value","index","push","JSON","stringify","client","subdomain","version","consumer_key","consumer_secret","access_token_key","access_token_secret","exports","startStream","type","parameters","streamId","stream","on","error","console","log","tweet","user","location","geo","coordinates","place","text","closeStream","emit","removeAllListeners","dataJson","module"],"mappings":"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","sourcesContent":["const { v4: uuidv4 } = require(\"uuid\");\r\nconst Twitter = require(\"twitter-lite\");\r\nconst credentials = require(\"./.credentials\");\r\n\r\nlet streams = {};\r\n\r\nfunction exportJSON(data) {\r\n  json = { data: [] };\r\n  data.forEach((value, index) => {\r\n    json.data.push(value);\r\n  });\r\n  var json = JSON.stringify(json.data);\r\n  return json;\r\n}\r\n\r\nconst client = new Twitter({\r\n  subdomain: \"api\",\r\n  version: \"1.1\",\r\n  consumer_key: credentials.consumer_key, // from Twitter.\r\n  consumer_secret: credentials.consumer_secret, // from Twitter.\r\n  access_token_key: credentials.access_token_key, // from your User (oauth_token)\r\n  access_token_secret: credentials.access_token_secret, // from your User (oauth_token_secret);\r\n});\r\n\r\nexports.startStream = (type, parameters) => {\r\n  const streamId = uuidv4();\r\n  const stream = client.stream(\"statuses/filter\", parameters);\r\n  stream.on(\"start\", () => {\r\n    streams[streamId] = { stream, data: [], error: null };\r\n    console.log(\"stream started\");\r\n  });\r\n  stream.on(\"error\", (error) => (streams[streamId].error = error)); //todo handler error\r\n  stream.on(\"data\", (tweet) => {\r\n    switch (type) {\r\n      case \"hashtag\":\r\n        if (\r\n          tweet.user.location ||\r\n          tweet.geo ||\r\n          tweet.coordinates ||\r\n          tweet.place\r\n        ) {\r\n          streams[streamId].data.push(tweet);\r\n          console.log(tweet.text);\r\n        }\r\n        break;\r\n      default:\r\n        streams[streamId].data.push(tweet);\r\n        console.log(tweet.text);\r\n    }\r\n  });\r\n  stream.on(\"end\", () => delete streams[streamId]);\r\n  return streamId;\r\n};\r\n\r\nexports.closeStream = (streamId) => {\r\n  const { stream, data, error } = streams[streamId];\r\n  console.log(\"closeStream data:\", data);\r\n  stream.emit(\"end\");\r\n  stream.removeAllListeners();\r\n  const dataJson = exportJSON(data);\r\n  return { dataJson, error };\r\n};\r\n\r\nmodule.exports = () => {\r\n  console.log(\"hello\");\r\n};\r\n"]},"metadata":{},"sourceType":"script"}