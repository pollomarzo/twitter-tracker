{"ast":null,"code":"var _require = require('uuid'),\n    uuidv4 = _require.v4;\n\nvar Twitter = require('twitter-lite');\n\nvar credentials = require('./.credentials');\n\nvar streams = {};\n\nfunction exportJSON(data) {\n  json = {\n    data: []\n  };\n  data.forEach(function (value) {\n    json.data.push(value);\n  });\n  var json = JSON.stringify(json.data);\n  return json;\n}\n\nconsole.log('hello');\nvar client = new Twitter({\n  subdomain: 'api',\n  version: '1.1',\n  consumer_key: credentials.consumer_key,\n  // from Twitter.\n  consumer_secret: credentials.consumer_secret,\n  // from Twitter.\n  access_token_key: credentials.access_token_key,\n  // from your User (oauth_token)\n  access_token_secret: credentials.access_token_secret // from your User (oauth_token_secret);\n\n});\n\nvar startStream = function startStream(type, parameters) {\n  var streamId = uuidv4();\n  console.log(streamId);\n  var stream = client.stream('statuses/filter', parameters);\n  streams[streamId] = {\n    stream: stream,\n    data: [],\n    error: null\n  };\n  console.log(\"startStream: \".concat(register.magic));\n  stream.on('start', function () {\n    return console.log('stream started');\n  });\n  stream.on('error', function (error) {\n    console.log(\"ERROR! Twitter says: \".concat(error.message));\n    streams[streamId].error = error;\n  }); //todo handler error\n\n  stream.on('data', function (tweet) {\n    switch (type) {\n      case 'hashtag':\n        if (tweet.user.location || tweet.geo || tweet.coordinates || tweet.place) {\n          streams[streamId].data.push(tweet);\n          streams[streamId].socket.emit('data', tweet);\n          console.log(tweet.text);\n        }\n\n        break;\n\n      default:\n        streams[streamId].data.push(tweet);\n        console.log(tweet.text);\n    }\n  });\n  return streamId;\n};\n\nvar closeStream = function closeStream(streamId) {\n  var _streams$streamId = streams[streamId],\n      stream = _streams$streamId.stream,\n      data = _streams$streamId.data,\n      error = _streams$streamId.error;\n  console.log('closeStream data:', data);\n  stream.destroy();\n  delete streams[streamId];\n  var dataJson = exportJSON(data);\n  return {\n    dataJson: dataJson,\n    error: error\n  };\n};\n\nvar register = function register(socket, streamId) {\n  console.log(\"Register: \".concat(register.magic));\n  streams[streamId].socket = socket;\n};\n\nregister.startStream = startStream;\nregister.closeStream = closeStream;\nregister.magic = Math.random();\nmodule.exports = register;","map":{"version":3,"sources":["/home/notchla/Documents/IngSw/twitter-tracker/twitterAPI/geoStream.js"],"names":["require","uuidv4","v4","Twitter","credentials","streams","exportJSON","data","json","forEach","value","push","JSON","stringify","console","log","client","subdomain","version","consumer_key","consumer_secret","access_token_key","access_token_secret","startStream","type","parameters","streamId","stream","error","register","magic","on","message","tweet","user","location","geo","coordinates","place","socket","emit","text","closeStream","destroy","dataJson","Math","random","module","exports"],"mappings":"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","sourcesContent":["const { v4: uuidv4 } = require('uuid');\r\nconst Twitter = require('twitter-lite');\r\nconst credentials = require('./.credentials');\r\n\r\nlet streams = {};\r\n\r\nfunction exportJSON(data) {\r\n  json = { data: [] };\r\n  data.forEach((value) => {\r\n    json.data.push(value);\r\n  });\r\n  var json = JSON.stringify(json.data);\r\n  return json;\r\n}\r\nconsole.log('hello');\r\nconst client = new Twitter({\r\n  subdomain: 'api',\r\n  version: '1.1',\r\n  consumer_key: credentials.consumer_key, // from Twitter.\r\n  consumer_secret: credentials.consumer_secret, // from Twitter.\r\n  access_token_key: credentials.access_token_key, // from your User (oauth_token)\r\n  access_token_secret: credentials.access_token_secret, // from your User (oauth_token_secret);\r\n});\r\n\r\nconst startStream = (type, parameters) => {\r\n  const streamId = uuidv4();\r\n  console.log(streamId);\r\n  const stream = client.stream('statuses/filter', parameters);\r\n  streams[streamId] = { stream, data: [], error: null };\r\n  console.log(`startStream: ${register.magic}`);\r\n  stream.on('start', () => console.log('stream started'));\r\n  stream.on('error', (error) => {\r\n    console.log(`ERROR! Twitter says: ${error.message}`);\r\n    streams[streamId].error = error;\r\n  }); //todo handler error\r\n  stream.on('data', (tweet) => {\r\n    switch (type) {\r\n      case 'hashtag':\r\n        if (tweet.user.location || tweet.geo || tweet.coordinates || tweet.place) {\r\n          streams[streamId].data.push(tweet);\r\n          streams[streamId].socket.emit('data', tweet);\r\n          console.log(tweet.text);\r\n        }\r\n        break;\r\n      default:\r\n        streams[streamId].data.push(tweet);\r\n        console.log(tweet.text);\r\n    }\r\n  });\r\n  return streamId;\r\n};\r\n\r\nconst closeStream = (streamId) => {\r\n  const { stream, data, error } = streams[streamId];\r\n  console.log('closeStream data:', data);\r\n  stream.destroy();\r\n  delete streams[streamId];\r\n  const dataJson = exportJSON(data);\r\n  return { dataJson, error };\r\n};\r\n\r\nconst register = (socket, streamId) => {\r\n  console.log(`Register: ${register.magic}`);\r\n  streams[streamId].socket = socket;\r\n};\r\n\r\nregister.startStream = startStream;\r\nregister.closeStream = closeStream;\r\nregister.magic = Math.random();\r\n\r\nmodule.exports = register;\r\n"]},"metadata":{},"sourceType":"script"}